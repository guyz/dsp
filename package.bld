/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/*
 * When constructing a release, release all build files.
 * To include the executables in your distribution, uncomment the assignment
 * of Pkg.attrs.exportExe to true.
 */
Pkg.attrs.exportAll = true;
//Pkg.attrs.exportExe = true;

/* Uncomment this to build the app with debug support */
//Pkg.attrs.profile = "debug";

/* bin/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("bin/");

/*
 * This statement places BIOS headers on the include path, which is necessary
 * for the TConf-generated assembly files.  This is only needed when building
 * a BIOS-based application, but the statement is benign for other OS's.
 */
//Pkg.uses.$add("ti/bios/include");

Pkg.otherFiles = [
    "h264vdec_ti.h",
    "ih264vdec.h",
    "h264vdec.h",
    "m4h3dec_ti.h",
    "im4h3dec.h",
    "cmem.h",
    "frame.h",
    "codec.h",
    "memman.h",
    "util.h"
];

/*
 * When using this package with the CE examples build, xdcpaths.mak can be
 * used to determine which PROGRAMS to build for (e.g. APP_LOCAL or APP_CLIENT).
 *
 * If PROGRAMS is set via the XDCARGS, we respect that, and only build what's
 * requested.  Else, we build everything we can.
 */
var programs = undefined;
for (x = 0; x < arguments.length; x++) {
    if (arguments[x].match(/^PROGRAMS=/)) {
        programs = arguments[x].split("=")[1];
//        print("programs:  " + programs);
    }
}

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];

    print("building for target " + targ.name + " ...");

    /* Platforms were added to targ.platforms[] in config.bld */
    for (var j = 0; j < targ.platforms.length; j++) {
        var platform = targ.platforms[j];

        print("  platform:  " + platform);

        if ((programs == undefined) || (programs.match(/APP_LOCAL/))) {
            /* application with local codecs (using local.cfg) */
            print("    app with local codecs.");
	    if (platform.match(/x64/)) {
		printf("WON'T BUILD ANYTHING FOR X64, YA HERE MEH?\n");
	    } else {
		addExe(targ, platform, "local");
	    }
            
        }

        if ((programs == undefined) || (programs.match(/APP_CLIENT/))) {
            /*
             * Assert that the platform has both a GPP and DSP, and this is the
             * GPP.  If so, build app with remote codecs (using remote.cfg)
             *
             * Note, currently we just check whether the target we're building
             * for has its targ.os set (which Linux and WinCE do, but BIOS does
             * not.  This tells us whether we're on the GPP side.  It's not
             * foolproof, and there should be a better way to determine this.
             */
            var platMod = xdc.useModule(platform + '.Platform');
            if (("DSP" in platMod) && ("GPP" in platMod) &&
                    targ.os != undefined) {
                print("    app with remote codecs.");
                addExe(targ, platform, "remote");
            }
        }
    }
}

/*
 *  ======== addExe ========
 */
function addExe(targ, platform, cfg)
{
    /* if on a C64, cache is enabled, and buffer alignment is 128 */
    var compileOpts = targ.suffix.match("64") ?
        "-DBUFALIGN=128 -DCACHE_ENABLED -I/home/user/toolchains/usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/usr/include" : "-I/home/user/toolchains/usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/usr/include";

    var suffix = "";

    /*
     * Create the list of source files to build.
     * targ.os is undefined for BIOS.  BIOS apps require 'main_BIOS.c' as
     * a BIOS task is spawned.  All other OS's use 'main_native.c'.
     * BIOS apps also set 'cfgScript' to the .tcf script.  All others use the
     * .cfg script.
     */
    var srcs = ["ce.c", "ce_h264.c", "ce_mpeg4.c"];

//    if (targ.os == undefined) {
        /* BIOS app */
//        srcs.push("main_BIOS.c");
//        suffix = ".tcf";
//    }
//    else {
        /* non-BIOS app */
//        srcs.push("main_native.c");
//        suffix = ".cfg";
//    }

    // name = bin/platform/name.x+suffix
    var name = "bin/" +
            // replace all ':' and '.' with '_' in platform name
            platform.replace(/\:/g, "_").replace(/\./g, "_") + '/app';

    var extra_deps = "client_cmem/beaglemc.o client_cmem/cmem.o client_cmem/magic-head.o client_cmem/pixfmt.o client_cmem/magic-tail.o client_cmem/stream-protocol.o client_cmem/omapfb.o client_cmem/time.o client_cmem/netsync.o client_cmem/neon_pixconv.o client_cmem/sysclk.o"

    Pkg.addExecutable(name + '_' + cfg, targ, platform, {
        copts: compileOpts,
        cfgScript: cfg + suffix,
        rtsName: null,
	lopts: "-lavformat -lavcodec -lavutil -lswscale -lSDL " + extra_deps
    }).addObjects(srcs);
}
/*
 *  @(#) ti.sdo.ce.examples.apps.video_copy; 1, 0, 0,77; 12-2-2010 21:21:32; /db/atree/library/trees/ce/ce-r11x/src/ xlibrary

 */

